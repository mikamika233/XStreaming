name: Android CI (React Native 0.72.14)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: {}

jobs:
  build-android:
    name: Build Android Debug APK
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable Corepack & Yarn 4.2.2
        run: |
          corepack enable
          corepack prepare yarn@4.2.2 --activate

      - name: Normalize & verify patch files
        run: |
          set -euo pipefail
          shopt -s nullglob
          if [ ! -d patches ]; then
            echo "No patches/ directory, skipping."
            exit 0
          fi

          for f in patches/*.patch; do
            echo "→ Normalize $f"
            # 1) CRLF -> LF
            perl -pi -e 's/\r\n/\n/g' "$f"
            # 2) 去 UTF-8 BOM
            sed -i '1s/^\xEF\xBB\xBF//' "$f"

            # 3) 检查合并冲突标记
            if grep -nE '^(<<<<<<<|=======|>>>>>>>)' "$f"; then
              echo "::error file=$f::Found merge conflict markers"
              exit 1
            fi

            # 4) 最小结构校验（必须有这些头部）
            if ! (grep -q '^diff --git ' "$f" && grep -q '^--- ' "$f" && grep -q '^\+\+\+ ' "$f" && grep -q '^@@ ' "$f"); then
              echo "::error file=$f::Patch headers look malformed (missing diff/---/+++/@@)"
              nl -ba "$f" | sed -n '1,120p'
              exit 1
            fi

            # 5) 试打（不改工作区），并在失败时给出上下文
            echo "→ Dry-run apply $f"
            if ! git apply --check --unsafe-paths -p1 "$f" 2> /tmp/git-apply.err; then
              echo "::error file=$f::git apply --check failed"
              cat /tmp/git-apply.err || true
              # 尝试解析报错中的行号并打印附近上下文
              LINE=$(grep -oE 'at line [0-9]+' /tmp/git-apply.err | awk '{print $3}' | tail -n1 || true)
              if [ -n "${LINE:-}" ]; then
                echo "Context around failure (lines $((LINE-8))..$((LINE+8))):"
                nl -ba "$f" | sed -n "$((LINE-8)),$((LINE+8))p" || true
              fi
              exit 1
            fi
          done

      # 关键：显式关闭 immutable（CI=true 时默认是开的）
      - name: Install dependencies (allow lockfile updates)
        run: yarn install --no-immutable
      
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # JDK 17（RN 0.72 / AGP 8 需要 Java 17）
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 安装 Android SDK（无需模拟器，仅构建即可）
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # 可选：Gradle 缓存（加速构建）
      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      # 赋予 gradlew 执行权限
      - name: Make gradlew executable
        run: chmod +x android/gradlew

      # 构建 Debug APK（CI 常用；如需 Release 可改 assembleRelease 并配置签名）
      - name: Build Android debug
        working-directory: android
        env:
          # 按需覆盖环境变量，例如 NDK/SDK 版本、或 Detox 等工具的需求
          # ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          # ORG_GRADLE_PROJECT_android.useAndroidX: true
          # ORG_GRADLE_PROJECT_android.enableJetifier: true
          CI: "true"
        run: ./gradlew assembleDebug

      # 上传 APK 供下载
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: error
