name: Build Android Debug (manual)

on:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: android-debug-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_OPTIONS: --max_old_space_size=4096
  GRADLE_USER_HOME: ${{ github.workspace }}/.gradle
  ORG_GRADLE_PROJECT_org.gradle.jvmargs: -Xmx3g -Dfile.encoding=UTF-8
  JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8

jobs:
  android-debug:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ✅ 用 Yarn Classic（1.x），避免 Berry/PnP 带来的 node_modules 缺失
      - name: Setup Node.js (20.x) + Yarn 1.22.x
        run: |
          set -euxo pipefail
          corepack enable
          corepack prepare yarn@1.22.22 --activate
          node -v
          yarn -v

      # 缓存（针对 Yarn 1：主要是 ~/.cache/yarn；Gradle 缓存照旧）
      - name: Restore Yarn & Gradle caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/yarn
            .gradle
            android/.gradle
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-yarn1-${{ hashFiles('**/yarn.lock') }}-gradle-${{ hashFiles('**/gradle-wrapper.properties', '**/settings.gradle*', '**/build.gradle*', '**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-yarn1-
            ${{ runner.os }}-

      # 规范化补丁换行
      - name: Normalize patch files (CRLF -> LF)
        run: |
          set -euxo pipefail
          if [ -d patches ]; then
            find patches -type f -name "*.patch" -print0 | xargs -0 -I{} bash -lc 'sed -i "s/\r$//" "{}"'
          fi

      # 用 Yarn 1 安装依赖（让 lifecycle scripts 正常跑，从而自动执行 patch-package）
      - name: Install dependencies
        run: |
          set -euxo pipefail
          yarn install --frozen-lockfile
          test -d node_modules

      # 保险：把不匹配的补丁移走（如果 postinstall 已经打过补丁，这步一般是空操作）
      - name: Prune patches for missing packages
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          if [ -d patches ]; then
            mkdir -p patches/_ignored
            while IFS= read -r -d '' p; do
              base="$(basename "$p")"; name="${base%.patch}"
              if [[ "$name" == @*+*+* ]]; then
                scope="${name%%+*}"; rest="${name#${scope}+}"; pkg="${rest%%+*}"
                target="${scope}/${pkg}"
              else
                target="${name%%+*}"
              fi
              if [ ! -d "node_modules/$target" ]; then
                echo "Skip $base (no package $target)"; mv "$p" "patches/_ignored/$base"
              fi
            done < <(find patches -maxdepth 1 -type f -name "*.patch" -print0)
          fi

      # 若前面的 postinstall 未跑到（某些 CI 情况），手动再执行一次
      - name: Apply patch-package (fallback)
        run: npx patch-package || true

      # 兜底：确保 RN Android CLI & Gradle plugin 在 node_modules 中
      - name: Ensure RN Android CLI & Gradle plugin
        run: |
          set -euxo pipefail
          MISSING=0
          if [ ! -f "node_modules/@react-native-community/cli-platform-android/native_modules.gradle" ]; then
            yarn add -D @react-native-community/cli-platform-android
            MISSING=1
          fi
          if [ ! -d "node_modules/@react-native/gradle-plugin" ]; then
            yarn add -D @react-native/gradle-plugin
            MISSING=1
          fi
          if [ "$MISSING" = "1" ]; then npx patch-package || true; fi

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Print Gradle & AGP versions
        working-directory: android
        run: |
          ./gradlew --version
          ./gradlew buildEnvironment -q || true

      - name: Build Debug APK
        working-directory: android
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          CI: true
        run: ./gradlew :app:assembleDebug --no-daemon --stacktrace --warning-mode all

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: xstreaming-android-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk
          if-no-files-found: error
          retention-days: 7      - name: Enable Corepack & Yarn 4.2.2
        run: |
          set -euxo pipefail
          corepack enable
          corepack prepare yarn@4.2.2 --activate
          yarn --version
          node -v

      # 缓存 Yarn tarball 缓存与 Gradle 缓存
      - name: Restore Yarn & Gradle caches
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .gradle
            android/.gradle
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-yarn4-${{ hashFiles('**/yarn.lock') }}-gradle-${{ hashFiles('**/gradle-wrapper.properties', '**/settings.gradle*', '**/build.gradle*', '**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-yarn4-
            ${{ runner.os }}-

      # 1) 规范化补丁换行（CRLF -> LF）
      - name: Normalize patch files (CRLF -> LF)
        run: |
          set -euxo pipefail
          if [ -d patches ]; then
            find patches -type f -name "*.patch" -print0 | xargs -0 -I{} bash -lc 'sed -i "s/\r$//" "{}"'
          fi

      # 2) 安装依赖：强制 node-modules 链接器，跳过 lifecycle scripts（避免 patch-package 在此阶段运行）
      - name: Install dependencies (skip scripts)
        run: |
          set -euxo pipefail
          yarn config set nodeLinker node-modules
          yarn config set enableGlobalCache false
          YARN_ENABLE_SCRIPTS=false yarn install --mode=update-lockfile
          # 确保 patch-package 可用（不会真正执行，只验存在）
          npx --yes patch-package --help >/dev/null

      # 2.1) 诊断 Yarn 配置/工作区，帮助定位为什么没有 node_modules
      - name: Diagnose Yarn linker & workspaces
        run: |
          set -euxo pipefail
          echo "Yarn version:"; yarn --version
          echo "Node version:"; node -v

          echo "Effective nodeLinker:"
          yarn config get nodeLinker || true

          echo "Project .yarnrc.yml (if any):"
          test -f .yarnrc.yml && cat .yarnrc.yml || echo "(no .yarnrc.yml)"

          echo "Workspaces info:"
          yarn workspaces list || true
          test -f package.json && head -n 80 package.json || true

      # 2.2) 如果没有生成 node_modules，则清理 PnP/安装状态并强制用 node-modules 重装一次
      - name: Ensure node_modules exists (force node-modules reinstall if needed)
        run: |
          set -euxo pipefail
          if [ ! -d node_modules ]; then
            echo "node_modules not found — forcing node-modules linker reinstall..."
            rm -f .pnp.cjs .pnp.data.json .pnp.loader.mjs 2>/dev/null || true
            rm -f .yarn/install-state.gz 2>/dev/null || true
            rm -rf node_modules 2>/dev/null || true

            export YARN_NODE_LINKER=node-modules
            yarn config set nodeLinker node-modules
            yarn config set enableGlobalCache false

            YARN_ENABLE_SCRIPTS=false yarn install --mode=update-lockfile --check-cache

            if [ ! -d node_modules ]; then
              echo "::error::Yarn 安装后仍未生成 node_modules。可能仍在使用 PnP 或当前目录不是工作区根。"
              yarn config --why nodeLinker || true
              yarn config --why enableGlobalCache || true
              ls -la
              exit 1
            fi
          fi
          echo "node_modules is present."

      # 3) 仅对“当前确实安装了的包”应用补丁：未安装的补丁移到 patches/_ignored
      - name: Prune patches for missing packages
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          if [ -d patches ]; then
            mkdir -p patches/_ignored
            echo "Scanning patches..."
            while IFS= read -r -d '' p; do
              base="$(basename "$p")"
              name="${base%.patch}"

              if [[ "$name" == @*+*+* ]]; then
                scope="${name%%+*}"            # @scope
                rest="${name#${scope}+}"       # package+version[…]
                pkg="${rest%%+*}"              # package
                target="${scope}/${pkg}"
              else
                target="${name%%+*}"           # unscoped package
              fi

              if [ ! -d "node_modules/$target" ]; then
                echo "Skipping patch $base (package $target not installed)"
                mv "$p" "patches/_ignored/$base"
              else
                echo "Keeping patch $base (package $target present)"
              fi
            done < <(find patches -maxdepth 1 -type f -name "*.patch" -print0)
            echo "Done pruning."
          else
            echo "No patches directory present."
          fi

      # 4) 手动应用剩余补丁
      - name: Apply patch-package patches
        run: npx --yes patch-package

      # 5) 兜底：确保 RN Android CLI & Gradle plugin 在 node_modules 中（仅对 runner 生效）
      - name: Ensure RN Android CLI & Gradle plugin
        run: |
          set -euxo pipefail
          MISSING=0
          if [ ! -f "node_modules/@react-native-community/cli-platform-android/native_modules.gradle" ]; then
            echo "Missing native_modules.gradle — installing @react-native-community/cli-platform-android ..."
            YARN_ENABLE_SCRIPTS=false yarn add -D @react-native-community/cli-platform-android
            MISSING=1
          fi
          if [ ! -d "node_modules/@react-native/gradle-plugin" ]; then
            echo "Missing @react-native/gradle-plugin — installing ..."
            YARN_ENABLE_SCRIPTS=false yarn add -D @react-native/gradle-plugin
            MISSING=1
          fi
          if [ "$MISSING" = "1" ]; then
            npx --yes patch-package || true
          fi
          test -f node_modules/@react-native-community/cli-platform-android/native_modules.gradle
          test -d node_modules/@react-native/gradle-plugin

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      # 可选：打印 Gradle 与 AGP 信息，便于排查
      - name: Print Gradle & AGP versions
        working-directory: android
        run: |
          ./gradlew --version
          ./gradlew buildEnvironment -q || true

      - name: Build Debug APK
        working-directory: android
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          CI: true
        run: ./gradlew :app:assembleDebug --no-daemon --stacktrace --warning-mode all

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: xstreaming-android-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk
          if-no-files-found: error
          retention-days: 7
