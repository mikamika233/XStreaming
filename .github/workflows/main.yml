name: Build Android Debug (manual, apply patches safely)

on:
  workflow_dispatch:

# Minimal permissions; actions/upload-artifact still works
permissions:
  contents: read

# Avoid duplicate manual runs building the same ref
concurrency:
  group: android-debug-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_OPTIONS: --max_old_space_size=4096
  GRADLE_USER_HOME: ${{ github.workspace }}/.gradle
  YARN_NODE_LINKER: node-modules
  # Speed up Gradle; you can adjust memory if needed
  ORG_GRADLE_PROJECT_org.gradle.jvmargs: -Xmx3g -Dfile.encoding=UTF-8
  JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8

jobs:
  android-debug:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js (20.x)
        uses: actions/setup-node@v4
        with:
          node-version: '20'   # consider pinning like '20.16.0' for reproducibility

      - name: Enable Corepack & Yarn 4.2.2
        run: |
          set -euxo pipefail
          corepack enable
          corepack prepare yarn@4.2.2 --activate
          yarn --version
          node -v

      # Cache the Yarn tarball cache and Gradle caches to speed up CI
      - name: Restore Yarn & Gradle caches
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .gradle
            android/.gradle
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-node${{ steps.nodever.outputs.version || '20' }}-yarn4-${{ hashFiles('**/yarn.lock') }}-gradle-${{ hashFiles('**/gradle-wrapper.properties', '**/build.gradle', '**/gradle.properties', '**/settings.gradle', '**/settings.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-node${{ steps.nodever.outputs.version || '20' }}-yarn4-
            ${{ runner.os }}-

      # Normalize patch newlines (CRLF -> LF) to avoid parse failures
      - name: Normalize patch files (CRLF -> LF)
        run: |
          set -euxo pipefail
          if [ -d patches ]; then
            find patches -type f -name "*.patch" -print0 | xargs -0 -I{} bash -lc 'sed -i "s/\r$//" "{}"'
          fi

      # Use node-modules linker and skip lifecycle scripts so patch-package doesn't run during install
      - name: Install dependencies (skip scripts)
        run: |
          set -euxo pipefail
          yarn config set nodeLinker node-modules
          # Ensure Yarn stores tarballs in repo-local cache for faster CI installs
          yarn config set enableGlobalCache false
          YARN_ENABLE_SCRIPTS=false yarn install --mode=update-lockfile
          test -d node_modules
          # Sanity: ensure patch-package is available
          npx --yes patch-package --help >/dev/null

      # Move patches that don't correspond to installed packages into patches/_ignored
      - name: Prune patches for missing packages
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          if [ -d patches ]; then
            mkdir -p patches/_ignored
            echo "Scanning patches..."
            while IFS= read -r -d '' p; do
              base="$(basename "$p")"
              name="${base%.patch}"

              if [[ "$name" == @*+*+* ]]; then
                scope="${name%%+*}"            # @scope
                rest="${name#${scope}+}"       # package+version[…]
                pkg="${rest%%+*}"              # package
                target="${scope}/${pkg}"
              else
                target="${name%%+*}"           # unscoped package
              fi

              if [ ! -d "node_modules/$target" ]; then
                echo "Skipping patch $base (package $target not installed)"
                mv "$p" "patches/_ignored/$base"
              else
                echo "Keeping patch $base (package $target present)"
              fi
            done < <(find patches -maxdepth 1 -type f -name "*.patch" -print0)
            echo "Done pruning."
          else
            echo "No patches directory present."
          fi

      # Apply remaining patch-package patches
      - name: Apply patch-package patches
        run: npx --yes patch-package

      # Ensure RN Android CLI & Gradle plugin exist (for runners that don't have them vendored)
      - name: Ensure RN Android CLI & Gradle plugin
        run: |
          set -euxo pipefail
          MISSING=0
          if [ ! -f "node_modules/@react-native-community/cli-platform-android/native_modules.gradle" ]; then
            echo "Missing native_modules.gradle — installing @react-native-community/cli-platform-android ..."
            YARN_ENABLE_SCRIPTS=false yarn add -D @react-native-community/cli-platform-android
            MISSING=1
          fi
          if [ ! -d "node_modules/@react-native/gradle-plugin" ]; then
            echo "Missing @react-native/gradle-plugin — installing ..."
            YARN_ENABLE_SCRIPTS=false yarn add -D @react-native/gradle-plugin
            MISSING=1
          fi
          if [ "$MISSING" = "1" ]; then
            npx --yes patch-package || true
          fi
          test -f node_modules/@react-native-community/cli-platform-android/native_modules.gradle
          test -d node_modules/@react-native/gradle-plugin

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      # Optional: show Gradle & AGP versions to help debug CI env quickly
      - name: Print Gradle & AGP versions
        working-directory: android
        run: |
          ./gradlew --version
          ./gradlew buildEnvironment -q || true

      - name: Build Debug APK
        working-directory: android
        env:
          # Avoid analytics noise; helps with determinism in CI
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          CI: true
        run: ./gradlew :app:assembleDebug --no-daemon --stacktrace --warning-mode all

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: xstreaming-android-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk
          if-no-files-found: error
          retention-days: 7
