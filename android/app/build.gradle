apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

react {
    // 保持原来的 React 配置不动
}

def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'
def webkit_version = rootProject.ext.has('webkitVersion') ? rootProject.ext.get('webkitVersion') : project.properties['ReactNativeWebView_webkitVersion']

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "com.xstreaming"

    defaultConfig {
        applicationId "com.xstreaming"
        versionCode 1
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName "2.3.3"
    }

    signingConfigs {
        debug {
            // 使用自定义 debug.keystore（你需要保证文件存在）
            storeFile file("$rootDir/app/debug.keystore")
            // 读取环境变量，若未设置则使用 Android 默认调试证书的口令/别名
            storePassword System.getenv("DEBUG_STORE_PASSWORD") ?: "android"
            keyAlias      System.getenv("DEBUG_KEY_ALIAS")      ?: "androiddebugkey"
            keyPassword   System.getenv("DEBUG_KEY_PASSWORD")   ?: "android"
        }

        release {
            // 这里读取 gradle.properties / CI 注入的环境变量
            if (project.hasProperty("MYAPP_UPLOAD_STORE_FILE")) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
        }
        release {
            // 如果 release keystore 配置存在就用 release，否则 fallback 到 debug
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation("com.google.code.gson:gson:2.10.1")
    implementation("com.google.guava:guava:30.1-android")

    implementation "androidx.webkit:webkit:$webkit_version"
    implementation project(':react-native-splash-screen')

    // umeng
    implementation 'com.umeng.umsdk:common:9.4.7'
    implementation 'com.umeng.umsdk:asms:1.4.0'

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); 
applyNativeModulesAppBuildGradle(project)
apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")
